#!/usr/bin/env python

import subprocess
import sys
import re
import sqlite3
from sqlite3 import Connection
import datetime
import time

# logs : CREATE TABLE logs(time datetime primary key, count int, type varchar, comment varchar)
# time_count : CREATE TABLE time_count(date date primary key, time int)
# overview: CREATE VIEW overview as select sum(`count`)*1.0/3600 as time, type  from logs group by type order by `time` desc
# peek: CREATE VIEW overview as select sum(`count`)*1.0/3600 as time, type  from logs group by type order by `time` desc

# convert `1h30m30s` time string to seconds


def hms2s(time: str) -> int:
    base = 0
    if 's' in time:
        base = 0
    elif 'm' in time:
        base = 1
    elif 'h' in time:
        base = 2
    return sum(
        int(x) * 60**(base + i)
        for i, x in enumerate(re.split('[hms]', time)[-2::-1]))


def s2hms(seconds: int) -> str:
    h = int(seconds / 3600)
    m = int((seconds - h * 3600) / 60)
    if h > 0:
        return "{}h{}m".format(h, m)
    else:
        return "{}m".format(m)


def parse_task_item(line: str, category: str, start: int,
                    plan_list: dict[str, list[tuple[str, str]]]) -> str:
    if start == 0:
        if 'x' in line:
            category = ''
        else:
            category = line[start + 6:]
    elif start == 2 and category != '':
        detail = line[start + 6:]
        if category not in plan_list:
            plan_list[category] = list()
        if "x" in line:
            plan_list[category].append((detail, "1"))
        else:
            plan_list[category].append((detail, "0"))
    return category


def countdown_plan() -> tuple[str, str, str]:
    plan_file: str = '/home/yuqyda/script/plan.md'
    plan_list: dict[str, list[tuple[str, str]]] = {}
    with open(plan_file) as file:
        lines: list[str] = file.readlines()
        lines = list(map(lambda e: e.rstrip(), lines))

        category: str = ""
        time: str = ""

        for _, line in enumerate(lines):
            match = re.search(r'-', line)
            if match:
                start = match.start()
                category = parse_task_item(line, category, start, plan_list)
                continue

            if '##' in line:
                time = line.split()[2]

        for category, val in plan_list.items():
            for task in val:
                if task[1] == "0":
                    return (time, category, task[0])

    return ('', '', '')


def countdown(count: str, typ: str, comment: str):
    if count == '' or typ == '' or comment == '':
        print('parameter errors')
        return
    seconds = hms2s(count)
    time_start = time.time()
    subprocess.run(["countdown", count])
    time_end = time.time()
    # print("time cost {}s".format(int(time_end-time_start)))
    subprocess.run(["mpg123", "/home/yuqyda/Music/success.mp3"])
    if time_end - time_start < seconds:
        seconds = int(time_end - time_start)
    db.execute(
        'insert into logs(`time`, `count`, `type`, `comment`) values (?,?,?,?)',
        (now, seconds, typ, comment))
    db.execute(
        'insert into time_count(`date`, `time`) values (?,?) on conflict(`date`) do update set time=time+?',
        (today, seconds, seconds))
    subprocess.run(["notify-send", "Task Done"])


def overview_plot(conn: Connection):
    # move plot dependency here to reduce time cost
    import matplotlib.pyplot as plt
    import numpy as np
    import pandas as pd
    from matplotlib.font_manager import FontProperties
    import seaborn as sns
    df = pd.read_sql_query('select * from overview', conn)
    font = FontProperties(
        fname='/usr/share/fonts/noto-cjk/NotoSansCJK-Regular.ttc', size=18)
    _, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect="equal"))

    tmp = (df['time'] / df['time'].sum()).to_numpy()
    percent = np.array([])
    for e in tmp:
        if e > 0.01:
            percent = np.append(percent, e)
    percent = np.append(percent, 1 - np.sum(percent))
    n = len(percent)
    labels = df['type'].to_numpy()[:n - 1]
    labels = np.append(labels, 'Others')
    labels = labels.tolist()
    ax.pie(percent,
           autopct=lambda x: "{:.1f}%".format(x),
           textprops={
               'color': 'w',
               'fontsize': 17
           },
           colors=sns.color_palette('hls'))
    ax.legend(labels,
              loc='upper right',
              bbox_to_anchor=(0.8, 0.4, 0.5, 0.5),
              prop=font)
    plt.show()


if __name__ == '__main__':
    loc = '/home/yuqyda/script/data.db'
    db = sqlite3.connect(loc)
    now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    today = datetime.datetime.now().strftime("%Y-%m-%d")
    op = 't'
    count = '25m'
    typ = ''
    comment = ''

    if len(sys.argv) >= 2:
        op = sys.argv[1][0]
        if len(sys.argv) >= 3:
            count = sys.argv[2]
            if len(sys.argv) >= 4:
                typ = sys.argv[3]
                if len(sys.argv) >= 5:
                    comment = sys.argv[4]

    if op == 'f':
        (count, typ, comment) = countdown_plan()
        countdown(count, typ, comment)
    elif op == 't':
        countdown(count, typ, comment)
    elif op == 'l':
        print("date\t\ttime")
        cursor = db.execute(
            'select * from time_count order by date desc limit 10')
        for row in cursor:
            print("{}\t{}".format(row[0], s2hms(row[1])))
    elif op == 'p':
        overview_plot(db)

    db.commit()
    db.close()
