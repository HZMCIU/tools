#!/usr/bin/env python

import subprocess
import sys
import re
import sqlite3
import datetime
import time

# logs : CREATE TABLE logs(time datetime primary key, count int, comment varchar)
# time_count : CREATE TABLE time_count(date date primary key, time int)


# convert `1h30m30s` time string to seconds
def hms2s(time: str) -> int:
    base = 0
    if 's' in time:
        base = 0
    elif 'm' in time:
        base = 1
    elif 'h' in time:
        base = 2
    return sum(
        int(x) * 60**(base + i)
        for i, x in enumerate(re.split('[hms]', time)[-2::-1]))


def s2hms(seconds: int) -> str:
    h = int(seconds / 3600)
    m = int((seconds - h * 3600) / 60)
    if h > 0:
        return "{}h{}m".format(h, m)
    else:
        return "{}m".format(m)


if __name__ == '__main__':
    loc = '/home/yuqyda/script/data.db'
    db = sqlite3.connect(loc)
    now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    today = datetime.datetime.now().strftime("%Y-%m-%d")
    op = 't'
    count = '25m'
    comment = ''

    if len(sys.argv) >= 2:
        op = sys.argv[1][0]
        if len(sys.argv) >= 3:
            count = sys.argv[2]
            if len(sys.argv) >= 4:
                comment = sys.argv[3]

    if op == 't':
        seconds = hms2s(count)
        time_start = time.time()
        subprocess.run(["countdown", count])
        time_end = time.time()
        # print("time cost {}s".format(int(time_end-time_start)))
        subprocess.run(["mpg123", "/home/yuqyda/Music/success.mp3"])
        if time_end - time_start < seconds:
            seconds = int(time_end - time_start)
        db.execute(
            'insert into logs(`time`, `count`, `comment`) values (?,?,?)',
            (now, seconds, comment))
        db.execute(
            'insert into time_count(`date`, `time`) values (?,?) on conflict(`date`) do update set time=time+?',
            (today, seconds, seconds))
        subprocess.run(["notify-send", "Task Done"])
    elif op == 'l':
        print("date\t\ttime")
        cursor = db.execute(
            'select * from time_count order by date desc limit 10')
        for row in cursor:
            print("{}\t{}".format(row[0], s2hms(row[1])))

    db.commit()
    db.close()
